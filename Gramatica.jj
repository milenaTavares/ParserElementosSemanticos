/**
** Trabalho 1 - Compiladores
** Grupo: Luiz Fantin, Milena Tavares e Rafael
**/

PARSER_BEGIN(Gramatica)

import java.io.*;

class Gramatica
{
  //Tabela tabela = new Tabela ();
  public static void main (String[] args) throws ParseException
  {
   try
   {
    Gramatica parser = new Gramatica (System.in);
    parser.Programa();
    System.out.println("Compilado....");
   }
    catch (ParseException e)
    {
     System.out.println(e.getMessage());
    }
   }
}
PARSER_END(Gramatica)


SKIP : {
  " " | "\r\n" | "\t"
}

TOKEN: {
  <ABREPAR: "(" > {
    System.out.println("Abre Parenteses: "+image);
  }
  |
  <FECHAPAR: ")" > {
    System.out.println("Fecha Parenteses: "+image);
  }
  |
  <VARIAVEL: "X" | "Y" > {			//Parece que tem que aceitar qualquer letra, mas os exemplos de cadeias não aceitas deixam dúvidas
    System.out.println("Variavel: "+image);
  }
  |
  <SINAL: "+" | "-" > {
    System.out.println("Sinal/Operador: "+image);
  }
  |
  <OPERADOR: "*" | "/" > {
    System.out.println("Operador: "+image);
  }
  |
  <POTENCIA: "^" > {
    System.out.println("Potencia: "+image);
  }
  |
  <NUMERO: (["0"-"9"])+("."(["0"-"9"])+)? > {
    System.out.println("Numero: "+image);
  }
  |
  <IGUAL: "=" > {
    System.out.println("Igual: "+image);
  }
}

//Tem que analisar como faz para chamar uma função ou outra. A atribuição não pode ser chamada recursivamente como as demais
void Programa(): { double a; } {
  a = A()<EOF> {
    System.out.println("Resultado = " +a);
  }

  /*
  Variavel()<EOF> {
    tabela.imprime();
  }
  */

}

/*
void Variavel(): { Token var = null, valor = null; } {
  (var = <VARIAVEL> <IGUAL> valor = <NUMERO> {
    tabela.insere(var.image, valor.image, ""); 
  } )+
}
*/

double A(): { double a, b = 0.00; Token t = null; } {
  a = B() ( t = <SINAL> b = B() {
    if (t.image.equals("-"))
      a = a - b;
    else
      a = a + b;
  } )*
  { return a; }
}

double B(): { double a, b = 0.00; Token t = null; } {
  a = C() ( t = <OPERADOR> b = C() {
    if (t.image.equals("*"))
      a = a * b;
    else
      a = a / b;
  } )*
  { return a; }
}


double C(): { double a, b = 0.00; Token t = null; } {
  a = D() ( t = <POTENCIA> b = D() {
      a = Math.pow(a, b); 
  } )*
  { return a; }
}

double D(): { double a; Token numero = null;  Token sinal; } {
  <ABREPAR> a = A() <FECHAPAR> { 
    return a; 
  }
  |
  numero = <NUMERO> {
    a = Double.parseDouble (numero.image);   
    return a;
  }
  |
  sinal = <SINAL> numero = <NUMERO> {
    if (sinal.image.equals("-"))
      a = -1.0*Double.parseDouble (numero.image);   
    else
      a = Double.parseDouble (numero.image);
    return a;
  }
}